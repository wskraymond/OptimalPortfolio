// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComboLeg.proto

#include "ComboLeg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protobuf {
class ComboLegDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComboLeg> _instance;
} _ComboLeg_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_ComboLeg_ComboLeg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_ComboLeg_default_instance_;
    new (ptr) ::protobuf::ComboLeg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::ComboLeg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComboLeg_ComboLeg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComboLeg_ComboLeg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ComboLeg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ComboLeg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ComboLeg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ComboLeg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, conid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, ratio_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, action_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, exchange_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, openclose_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, shortsalesslot_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, designatedlocation_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, exemptcode_),
  PROTOBUF_FIELD_OFFSET(::protobuf::ComboLeg, perlegprice_),
  3,
  4,
  0,
  1,
  5,
  6,
  2,
  8,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::protobuf::ComboLeg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_ComboLeg_default_instance_),
};

const char descriptor_table_protodef_ComboLeg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ComboLeg.proto\022\010protobuf\"\352\002\n\010ComboLeg\022"
  "\022\n\005conId\030\001 \001(\005H\000\210\001\001\022\022\n\005ratio\030\002 \001(\005H\001\210\001\001\022"
  "\023\n\006action\030\003 \001(\tH\002\210\001\001\022\025\n\010exchange\030\004 \001(\tH\003"
  "\210\001\001\022\026\n\topenClose\030\005 \001(\005H\004\210\001\001\022\033\n\016shortSale"
  "sSlot\030\006 \001(\005H\005\210\001\001\022\037\n\022designatedLocation\030\007"
  " \001(\tH\006\210\001\001\022\027\n\nexemptCode\030\010 \001(\005H\007\210\001\001\022\030\n\013pe"
  "rLegPrice\030\t \001(\001H\010\210\001\001B\010\n\006_conIdB\010\n\006_ratio"
  "B\t\n\007_actionB\013\n\t_exchangeB\014\n\n_openCloseB\021"
  "\n\017_shortSalesSlotB\025\n\023_designatedLocation"
  "B\r\n\013_exemptCodeB\016\n\014_perLegPriceB\'\n\026com.i"
  "b.client.protobufB\rComboLegProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ComboLeg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ComboLeg_2eproto_sccs[1] = {
  &scc_info_ComboLeg_ComboLeg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ComboLeg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ComboLeg_2eproto = {
  false, false, descriptor_table_protodef_ComboLeg_2eproto, "ComboLeg.proto", 440,
  &descriptor_table_ComboLeg_2eproto_once, descriptor_table_ComboLeg_2eproto_sccs, descriptor_table_ComboLeg_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ComboLeg_2eproto::offsets,
  file_level_metadata_ComboLeg_2eproto, 1, file_level_enum_descriptors_ComboLeg_2eproto, file_level_service_descriptors_ComboLeg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ComboLeg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ComboLeg_2eproto)), true);
namespace protobuf {

// ===================================================================

void ComboLeg::InitAsDefaultInstance() {
}
class ComboLeg::_Internal {
 public:
  using HasBits = decltype(std::declval<ComboLeg>()._has_bits_);
  static void set_has_conid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_openclose(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shortsalesslot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_designatedlocation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exemptcode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_perlegprice(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ComboLeg::ComboLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.ComboLeg)
}
ComboLeg::ComboLeg(const ComboLeg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action()) {
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action(),
      GetArena());
  }
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exchange()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  designatedlocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_designatedlocation()) {
    designatedlocation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_designatedlocation(),
      GetArena());
  }
  ::memcpy(&conid_, &from.conid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exemptcode_) -
    reinterpret_cast<char*>(&conid_)) + sizeof(exemptcode_));
  // @@protoc_insertion_point(copy_constructor:protobuf.ComboLeg)
}

void ComboLeg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComboLeg_ComboLeg_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  designatedlocation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exemptcode_) -
      reinterpret_cast<char*>(&conid_)) + sizeof(exemptcode_));
}

ComboLeg::~ComboLeg() {
  // @@protoc_insertion_point(destructor:protobuf.ComboLeg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComboLeg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  designatedlocation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComboLeg::ArenaDtor(void* object) {
  ComboLeg* _this = reinterpret_cast< ComboLeg* >(object);
  (void)_this;
}
void ComboLeg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComboLeg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComboLeg& ComboLeg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComboLeg_ComboLeg_2eproto.base);
  return *internal_default_instance();
}


void ComboLeg::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ComboLeg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      designatedlocation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&conid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&perlegprice_) -
        reinterpret_cast<char*>(&conid_)) + sizeof(perlegprice_));
  }
  exemptcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboLeg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 conId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_conid(&has_bits);
          conid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ratio(&has_bits);
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ComboLeg.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ComboLeg.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 openClose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_openclose(&has_bits);
          openclose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shortSalesSlot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_shortsalesslot(&has_bits);
          shortsalesslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string designatedLocation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_designatedlocation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.ComboLeg.designatedLocation"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exemptCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_exemptcode(&has_bits);
          exemptcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double perLegPrice = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_perlegprice(&has_bits);
          perlegprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboLeg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.ComboLeg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 conId = 1;
  if (_internal_has_conid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_conid(), target);
  }

  // int32 ratio = 2;
  if (_internal_has_ratio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ratio(), target);
  }

  // string action = 3;
  if (_internal_has_action()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ComboLeg.action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_action(), target);
  }

  // string exchange = 4;
  if (_internal_has_exchange()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ComboLeg.exchange");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exchange(), target);
  }

  // int32 openClose = 5;
  if (_internal_has_openclose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_openclose(), target);
  }

  // int32 shortSalesSlot = 6;
  if (_internal_has_shortsalesslot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_shortsalesslot(), target);
  }

  // string designatedLocation = 7;
  if (_internal_has_designatedlocation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_designatedlocation().data(), static_cast<int>(this->_internal_designatedlocation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.ComboLeg.designatedLocation");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_designatedlocation(), target);
  }

  // int32 exemptCode = 8;
  if (_internal_has_exemptcode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_exemptcode(), target);
  }

  // double perLegPrice = 9;
  if (_internal_has_perlegprice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_perlegprice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.ComboLeg)
  return target;
}

size_t ComboLeg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.ComboLeg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string action = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // string exchange = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exchange());
    }

    // string designatedLocation = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_designatedlocation());
    }

    // int32 conId = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_conid());
    }

    // int32 ratio = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ratio());
    }

    // int32 openClose = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_openclose());
    }

    // int32 shortSalesSlot = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_shortsalesslot());
    }

    // double perLegPrice = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // int32 exemptCode = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exemptcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComboLeg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.ComboLeg)
  GOOGLE_DCHECK_NE(&from, this);
  const ComboLeg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComboLeg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.ComboLeg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.ComboLeg)
    MergeFrom(*source);
  }
}

void ComboLeg::MergeFrom(const ComboLeg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ComboLeg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_designatedlocation(from._internal_designatedlocation());
    }
    if (cached_has_bits & 0x00000008u) {
      conid_ = from.conid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ratio_ = from.ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      openclose_ = from.openclose_;
    }
    if (cached_has_bits & 0x00000040u) {
      shortsalesslot_ = from.shortsalesslot_;
    }
    if (cached_has_bits & 0x00000080u) {
      perlegprice_ = from.perlegprice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_exemptcode(from._internal_exemptcode());
  }
}

void ComboLeg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.ComboLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComboLeg::CopyFrom(const ComboLeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ComboLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboLeg::IsInitialized() const {
  return true;
}

void ComboLeg::InternalSwap(ComboLeg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  designatedlocation_.Swap(&other->designatedlocation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboLeg, exemptcode_)
      + sizeof(ComboLeg::exemptcode_)
      - PROTOBUF_FIELD_OFFSET(ComboLeg, conid_)>(
          reinterpret_cast<char*>(&conid_),
          reinterpret_cast<char*>(&other->conid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboLeg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::ComboLeg* Arena::CreateMaybeMessage< ::protobuf::ComboLeg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::ComboLeg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

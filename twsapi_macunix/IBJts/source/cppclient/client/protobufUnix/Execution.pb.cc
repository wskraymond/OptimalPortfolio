// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Execution.proto

#include "Execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protobuf {
class ExecutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Execution> _instance;
} _Execution_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_Execution_Execution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_Execution_default_instance_;
    new (ptr) ::protobuf::Execution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::Execution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Execution_Execution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Execution_Execution_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Execution_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Execution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Execution_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Execution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, orderid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, execid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, acctnumber_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, exchange_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, side_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, shares_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, price_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, permid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, clientid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, isliquidation_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, cumqty_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, avgprice_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, orderref_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, evrule_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, evmultiplier_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, modelcode_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, lastliquidity_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, ispricerevisionpending_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, submitter_),
  PROTOBUF_FIELD_OFFSET(::protobuf::Execution, optexerciseorlapsetype_),
  11,
  0,
  1,
  2,
  3,
  4,
  5,
  13,
  14,
  12,
  17,
  6,
  15,
  7,
  8,
  16,
  9,
  19,
  18,
  10,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, sizeof(::protobuf::Execution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_Execution_default_instance_),
};

const char descriptor_table_protodef_Execution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017Execution.proto\022\010protobuf\"\257\006\n\tExecutio"
  "n\022\024\n\007orderId\030\001 \001(\005H\000\210\001\001\022\023\n\006execId\030\002 \001(\tH"
  "\001\210\001\001\022\021\n\004time\030\003 \001(\tH\002\210\001\001\022\027\n\nacctNumber\030\004 "
  "\001(\tH\003\210\001\001\022\025\n\010exchange\030\005 \001(\tH\004\210\001\001\022\021\n\004side\030"
  "\006 \001(\tH\005\210\001\001\022\023\n\006shares\030\007 \001(\tH\006\210\001\001\022\022\n\005price"
  "\030\010 \001(\001H\007\210\001\001\022\023\n\006permId\030\t \001(\003H\010\210\001\001\022\025\n\010clie"
  "ntId\030\n \001(\005H\t\210\001\001\022\032\n\risLiquidation\030\013 \001(\010H\n"
  "\210\001\001\022\023\n\006cumQty\030\014 \001(\tH\013\210\001\001\022\025\n\010avgPrice\030\r \001"
  "(\001H\014\210\001\001\022\025\n\010orderRef\030\016 \001(\tH\r\210\001\001\022\023\n\006evRule"
  "\030\017 \001(\tH\016\210\001\001\022\031\n\014evMultiplier\030\020 \001(\001H\017\210\001\001\022\026"
  "\n\tmodelCode\030\021 \001(\tH\020\210\001\001\022\032\n\rlastLiquidity\030"
  "\022 \001(\005H\021\210\001\001\022#\n\026isPriceRevisionPending\030\023 \001"
  "(\010H\022\210\001\001\022\026\n\tsubmitter\030\024 \001(\tH\023\210\001\001\022#\n\026optEx"
  "erciseOrLapseType\030\025 \001(\005H\024\210\001\001B\n\n\010_orderId"
  "B\t\n\007_execIdB\007\n\005_timeB\r\n\013_acctNumberB\013\n\t_"
  "exchangeB\007\n\005_sideB\t\n\007_sharesB\010\n\006_priceB\t"
  "\n\007_permIdB\013\n\t_clientIdB\020\n\016_isLiquidation"
  "B\t\n\007_cumQtyB\013\n\t_avgPriceB\013\n\t_orderRefB\t\n"
  "\007_evRuleB\017\n\r_evMultiplierB\014\n\n_modelCodeB"
  "\020\n\016_lastLiquidityB\031\n\027_isPriceRevisionPen"
  "dingB\014\n\n_submitterB\031\n\027_optExerciseOrLaps"
  "eTypeB9\n\026com.ib.client.protobufB\016Executi"
  "onProto\252\002\016IBApi.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Execution_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Execution_2eproto_sccs[1] = {
  &scc_info_Execution_Execution_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Execution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Execution_2eproto = {
  false, false, descriptor_table_protodef_Execution_2eproto, "Execution.proto", 912,
  &descriptor_table_Execution_2eproto_once, descriptor_table_Execution_2eproto_sccs, descriptor_table_Execution_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_Execution_2eproto::offsets,
  file_level_metadata_Execution_2eproto, 1, file_level_enum_descriptors_Execution_2eproto, file_level_service_descriptors_Execution_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Execution_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Execution_2eproto)), true);
namespace protobuf {

// ===================================================================

void Execution::InitAsDefaultInstance() {
}
class Execution::_Internal {
 public:
  using HasBits = decltype(std::declval<Execution>()._has_bits_);
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_execid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acctnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shares(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_permid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_isliquidation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cumqty(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_avgprice(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_orderref(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_evrule(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_evmultiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_modelcode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lastliquidity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ispricerevisionpending(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_submitter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_optexerciseorlapsetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

Execution::Execution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Execution)
}
Execution::Execution(const Execution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_execid()) {
    execid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_execid(),
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time()) {
    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
      GetArena());
  }
  acctnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_acctnumber()) {
    acctnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_acctnumber(),
      GetArena());
  }
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exchange()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_side()) {
    side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_side(),
      GetArena());
  }
  shares_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shares()) {
    shares_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shares(),
      GetArena());
  }
  cumqty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cumqty()) {
    cumqty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cumqty(),
      GetArena());
  }
  orderref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_orderref()) {
    orderref_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderref(),
      GetArena());
  }
  evrule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_evrule()) {
    evrule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_evrule(),
      GetArena());
  }
  modelcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelcode()) {
    modelcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_modelcode(),
      GetArena());
  }
  submitter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_submitter()) {
    submitter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_submitter(),
      GetArena());
  }
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&optexerciseorlapsetype_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(optexerciseorlapsetype_));
  // @@protoc_insertion_point(copy_constructor:protobuf.Execution)
}

void Execution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Execution_Execution_2eproto.base);
  execid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acctnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shares_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cumqty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evrule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submitter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optexerciseorlapsetype_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(optexerciseorlapsetype_));
}

Execution::~Execution() {
  // @@protoc_insertion_point(destructor:protobuf.Execution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Execution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  execid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acctnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shares_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cumqty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evrule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submitter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Execution::ArenaDtor(void* object) {
  Execution* _this = reinterpret_cast< Execution* >(object);
  (void)_this;
}
void Execution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Execution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Execution& Execution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Execution_Execution_2eproto.base);
  return *internal_default_instance();
}


void Execution::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Execution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      execid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      acctnumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      side_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      shares_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      cumqty_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      orderref_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      evrule_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      modelcode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      submitter_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&orderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avgprice_) -
        reinterpret_cast<char*>(&orderid_)) + sizeof(avgprice_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&evmultiplier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optexerciseorlapsetype_) -
        reinterpret_cast<char*>(&evmultiplier_)) + sizeof(optexerciseorlapsetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Execution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string execId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_execid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.execId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string acctNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_acctnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.acctNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string side = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_side();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.side"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shares = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_shares();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.shares"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 permId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_permid(&has_bits);
          permid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clientId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_clientid(&has_bits);
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isLiquidation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_isliquidation(&has_bits);
          isliquidation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cumQty = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_cumqty();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.cumQty"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double avgPrice = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_avgprice(&has_bits);
          avgprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string orderRef = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_orderref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.orderRef"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string evRule = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_evrule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.evRule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double evMultiplier = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_evmultiplier(&has_bits);
          evmultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string modelCode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_modelcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.modelCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastLiquidity = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lastliquidity(&has_bits);
          lastliquidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isPriceRevisionPending = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ispricerevisionpending(&has_bits);
          ispricerevisionpending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string submitter = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_submitter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.Execution.submitter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 optExerciseOrLapseType = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_optexerciseorlapsetype(&has_bits);
          optexerciseorlapsetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Execution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Execution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (_internal_has_orderid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderid(), target);
  }

  // string execId = 2;
  if (_internal_has_execid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execid().data(), static_cast<int>(this->_internal_execid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.execId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_execid(), target);
  }

  // string time = 3;
  if (_internal_has_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time(), target);
  }

  // string acctNumber = 4;
  if (_internal_has_acctnumber()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acctnumber().data(), static_cast<int>(this->_internal_acctnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.acctNumber");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_acctnumber(), target);
  }

  // string exchange = 5;
  if (_internal_has_exchange()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.exchange");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_exchange(), target);
  }

  // string side = 6;
  if (_internal_has_side()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_side().data(), static_cast<int>(this->_internal_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.side");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_side(), target);
  }

  // string shares = 7;
  if (_internal_has_shares()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shares().data(), static_cast<int>(this->_internal_shares().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.shares");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_shares(), target);
  }

  // double price = 8;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_price(), target);
  }

  // int64 permId = 9;
  if (_internal_has_permid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_permid(), target);
  }

  // int32 clientId = 10;
  if (_internal_has_clientid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_clientid(), target);
  }

  // bool isLiquidation = 11;
  if (_internal_has_isliquidation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_isliquidation(), target);
  }

  // string cumQty = 12;
  if (_internal_has_cumqty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cumqty().data(), static_cast<int>(this->_internal_cumqty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.cumQty");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_cumqty(), target);
  }

  // double avgPrice = 13;
  if (_internal_has_avgprice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_avgprice(), target);
  }

  // string orderRef = 14;
  if (_internal_has_orderref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderref().data(), static_cast<int>(this->_internal_orderref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.orderRef");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_orderref(), target);
  }

  // string evRule = 15;
  if (_internal_has_evrule()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_evrule().data(), static_cast<int>(this->_internal_evrule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.evRule");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_evrule(), target);
  }

  // double evMultiplier = 16;
  if (_internal_has_evmultiplier()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_evmultiplier(), target);
  }

  // string modelCode = 17;
  if (_internal_has_modelcode()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelcode().data(), static_cast<int>(this->_internal_modelcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.modelCode");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_modelcode(), target);
  }

  // int32 lastLiquidity = 18;
  if (_internal_has_lastliquidity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_lastliquidity(), target);
  }

  // bool isPriceRevisionPending = 19;
  if (_internal_has_ispricerevisionpending()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_ispricerevisionpending(), target);
  }

  // string submitter = 20;
  if (_internal_has_submitter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_submitter().data(), static_cast<int>(this->_internal_submitter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.Execution.submitter");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_submitter(), target);
  }

  // int32 optExerciseOrLapseType = 21;
  if (_internal_has_optexerciseorlapsetype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_optexerciseorlapsetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Execution)
  return target;
}

size_t Execution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Execution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string execId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_execid());
    }

    // string time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time());
    }

    // string acctNumber = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_acctnumber());
    }

    // string exchange = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exchange());
    }

    // string side = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_side());
    }

    // string shares = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shares());
    }

    // string cumQty = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cumqty());
    }

    // string orderRef = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_orderref());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // string evRule = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_evrule());
    }

    // string modelCode = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_modelcode());
    }

    // string submitter = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_submitter());
    }

    // int32 orderId = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_orderid());
    }

    // int32 clientId = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clientid());
    }

    // double price = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // int64 permId = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_permid());
    }

    // double avgPrice = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // double evMultiplier = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // bool isLiquidation = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // bool isPriceRevisionPending = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // int32 lastLiquidity = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lastliquidity());
    }

    // int32 optExerciseOrLapseType = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optexerciseorlapsetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Execution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Execution)
  GOOGLE_DCHECK_NE(&from, this);
  const Execution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Execution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Execution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Execution)
    MergeFrom(*source);
  }
}

void Execution::MergeFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Execution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_execid(from._internal_execid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_time(from._internal_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_acctnumber(from._internal_acctnumber());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_side(from._internal_side());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_shares(from._internal_shares());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_cumqty(from._internal_cumqty());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_orderref(from._internal_orderref());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_evrule(from._internal_evrule());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_modelcode(from._internal_modelcode());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_submitter(from._internal_submitter());
    }
    if (cached_has_bits & 0x00000800u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00001000u) {
      clientid_ = from.clientid_;
    }
    if (cached_has_bits & 0x00002000u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00004000u) {
      permid_ = from.permid_;
    }
    if (cached_has_bits & 0x00008000u) {
      avgprice_ = from.avgprice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      evmultiplier_ = from.evmultiplier_;
    }
    if (cached_has_bits & 0x00020000u) {
      isliquidation_ = from.isliquidation_;
    }
    if (cached_has_bits & 0x00040000u) {
      ispricerevisionpending_ = from.ispricerevisionpending_;
    }
    if (cached_has_bits & 0x00080000u) {
      lastliquidity_ = from.lastliquidity_;
    }
    if (cached_has_bits & 0x00100000u) {
      optexerciseorlapsetype_ = from.optexerciseorlapsetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Execution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Execution::CopyFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execution::IsInitialized() const {
  return true;
}

void Execution::InternalSwap(Execution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  execid_.Swap(&other->execid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  acctnumber_.Swap(&other->acctnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  side_.Swap(&other->side_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shares_.Swap(&other->shares_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cumqty_.Swap(&other->cumqty_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderref_.Swap(&other->orderref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  evrule_.Swap(&other->evrule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modelcode_.Swap(&other->modelcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  submitter_.Swap(&other->submitter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Execution, optexerciseorlapsetype_)
      + sizeof(Execution::optexerciseorlapsetype_)
      - PROTOBUF_FIELD_OFFSET(Execution, orderid_)>(
          reinterpret_cast<char*>(&orderid_),
          reinterpret_cast<char*>(&other->orderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Execution::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::Execution* Arena::CreateMaybeMessage< ::protobuf::Execution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::Execution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

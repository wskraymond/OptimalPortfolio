// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExecutionFilter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ExecutionFilter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ExecutionFilter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ExecutionFilter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ExecutionFilter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ExecutionFilter_2eproto;
namespace protobuf {
class ExecutionFilter;
class ExecutionFilterDefaultTypeInternal;
extern ExecutionFilterDefaultTypeInternal _ExecutionFilter_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::ExecutionFilter* Arena::CreateMaybeMessage<::protobuf::ExecutionFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class ExecutionFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ExecutionFilter) */ {
 public:
  inline ExecutionFilter() : ExecutionFilter(nullptr) {};
  virtual ~ExecutionFilter();

  ExecutionFilter(const ExecutionFilter& from);
  ExecutionFilter(ExecutionFilter&& from) noexcept
    : ExecutionFilter() {
    *this = ::std::move(from);
  }

  inline ExecutionFilter& operator=(const ExecutionFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionFilter& operator=(ExecutionFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutionFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionFilter* internal_default_instance() {
    return reinterpret_cast<const ExecutionFilter*>(
               &_ExecutionFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExecutionFilter& a, ExecutionFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionFilter* New() const final {
    return CreateMaybeMessage<ExecutionFilter>(nullptr);
  }

  ExecutionFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutionFilter& from);
  void MergeFrom(const ExecutionFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.ExecutionFilter";
  }
  protected:
  explicit ExecutionFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ExecutionFilter_2eproto);
    return ::descriptor_table_ExecutionFilter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecificDatesFieldNumber = 9,
    kAcctCodeFieldNumber = 2,
    kTimeFieldNumber = 3,
    kSymbolFieldNumber = 4,
    kSecTypeFieldNumber = 5,
    kExchangeFieldNumber = 6,
    kSideFieldNumber = 7,
    kClientIdFieldNumber = 1,
    kLastNDaysFieldNumber = 8,
  };
  // repeated int32 specificDates = 9;
  int specificdates_size() const;
  private:
  int _internal_specificdates_size() const;
  public:
  void clear_specificdates();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_specificdates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_specificdates() const;
  void _internal_add_specificdates(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_specificdates();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 specificdates(int index) const;
  void set_specificdates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_specificdates(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      specificdates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_specificdates();

  // string acctCode = 2;
  bool has_acctcode() const;
  private:
  bool _internal_has_acctcode() const;
  public:
  void clear_acctcode();
  const std::string& acctcode() const;
  void set_acctcode(const std::string& value);
  void set_acctcode(std::string&& value);
  void set_acctcode(const char* value);
  void set_acctcode(const char* value, size_t size);
  std::string* mutable_acctcode();
  std::string* release_acctcode();
  void set_allocated_acctcode(std::string* acctcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_acctcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_acctcode(
      std::string* acctcode);
  private:
  const std::string& _internal_acctcode() const;
  void _internal_set_acctcode(const std::string& value);
  std::string* _internal_mutable_acctcode();
  public:

  // string time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time(
      std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string symbol = 4;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbol(
      std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string secType = 5;
  bool has_sectype() const;
  private:
  bool _internal_has_sectype() const;
  public:
  void clear_sectype();
  const std::string& sectype() const;
  void set_sectype(const std::string& value);
  void set_sectype(std::string&& value);
  void set_sectype(const char* value);
  void set_sectype(const char* value, size_t size);
  std::string* mutable_sectype();
  std::string* release_sectype();
  void set_allocated_sectype(std::string* sectype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sectype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sectype(
      std::string* sectype);
  private:
  const std::string& _internal_sectype() const;
  void _internal_set_sectype(const std::string& value);
  std::string* _internal_mutable_sectype();
  public:

  // string exchange = 6;
  bool has_exchange() const;
  private:
  bool _internal_has_exchange() const;
  public:
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange(
      std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string side = 7;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  const std::string& side() const;
  void set_side(const std::string& value);
  void set_side(std::string&& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  std::string* mutable_side();
  std::string* release_side();
  void set_allocated_side(std::string* side);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_side();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_side(
      std::string* side);
  private:
  const std::string& _internal_side() const;
  void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // int32 clientId = 1;
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  ::PROTOBUF_NAMESPACE_ID::int32 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientid() const;
  void _internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastNDays = 8;
  bool has_lastndays() const;
  private:
  bool _internal_has_lastndays() const;
  public:
  void clear_lastndays();
  ::PROTOBUF_NAMESPACE_ID::int32 lastndays() const;
  void set_lastndays(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastndays() const;
  void _internal_set_lastndays(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.ExecutionFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > specificdates_;
  mutable std::atomic<int> _specificdates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acctcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sectype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientid_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastndays_;
  friend struct ::TableStruct_ExecutionFilter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutionFilter

// int32 clientId = 1;
inline bool ExecutionFilter::_internal_has_clientid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExecutionFilter::has_clientid() const {
  return _internal_has_clientid();
}
inline void ExecutionFilter::clear_clientid() {
  clientid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionFilter::_internal_clientid() const {
  return clientid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionFilter::clientid() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.clientId)
  return _internal_clientid();
}
inline void ExecutionFilter::_internal_set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  clientid_ = value;
}
inline void ExecutionFilter::set_clientid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.clientId)
}

// string acctCode = 2;
inline bool ExecutionFilter::_internal_has_acctcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExecutionFilter::has_acctcode() const {
  return _internal_has_acctcode();
}
inline void ExecutionFilter::clear_acctcode() {
  acctcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExecutionFilter::acctcode() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.acctCode)
  return _internal_acctcode();
}
inline void ExecutionFilter::set_acctcode(const std::string& value) {
  _internal_set_acctcode(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.acctCode)
}
inline std::string* ExecutionFilter::mutable_acctcode() {
  // @@protoc_insertion_point(field_mutable:protobuf.ExecutionFilter.acctCode)
  return _internal_mutable_acctcode();
}
inline const std::string& ExecutionFilter::_internal_acctcode() const {
  return acctcode_.Get();
}
inline void ExecutionFilter::_internal_set_acctcode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  acctcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecutionFilter::set_acctcode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  acctcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ExecutionFilter.acctCode)
}
inline void ExecutionFilter::set_acctcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  acctcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ExecutionFilter.acctCode)
}
inline void ExecutionFilter::set_acctcode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  acctcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ExecutionFilter.acctCode)
}
inline std::string* ExecutionFilter::_internal_mutable_acctcode() {
  _has_bits_[0] |= 0x00000001u;
  return acctcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecutionFilter::release_acctcode() {
  // @@protoc_insertion_point(field_release:protobuf.ExecutionFilter.acctCode)
  if (!_internal_has_acctcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return acctcode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutionFilter::set_allocated_acctcode(std::string* acctcode) {
  if (acctcode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  acctcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acctcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ExecutionFilter.acctCode)
}
inline std::string* ExecutionFilter::unsafe_arena_release_acctcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ExecutionFilter.acctCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return acctcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecutionFilter::unsafe_arena_set_allocated_acctcode(
    std::string* acctcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (acctcode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  acctcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      acctcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ExecutionFilter.acctCode)
}

// string time = 3;
inline bool ExecutionFilter::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExecutionFilter::has_time() const {
  return _internal_has_time();
}
inline void ExecutionFilter::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExecutionFilter::time() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.time)
  return _internal_time();
}
inline void ExecutionFilter::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.time)
}
inline std::string* ExecutionFilter::mutable_time() {
  // @@protoc_insertion_point(field_mutable:protobuf.ExecutionFilter.time)
  return _internal_mutable_time();
}
inline const std::string& ExecutionFilter::_internal_time() const {
  return time_.Get();
}
inline void ExecutionFilter::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecutionFilter::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ExecutionFilter.time)
}
inline void ExecutionFilter::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ExecutionFilter.time)
}
inline void ExecutionFilter::set_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ExecutionFilter.time)
}
inline std::string* ExecutionFilter::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000002u;
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecutionFilter::release_time() {
  // @@protoc_insertion_point(field_release:protobuf.ExecutionFilter.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutionFilter::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ExecutionFilter.time)
}
inline std::string* ExecutionFilter::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ExecutionFilter.time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecutionFilter::unsafe_arena_set_allocated_time(
    std::string* time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ExecutionFilter.time)
}

// string symbol = 4;
inline bool ExecutionFilter::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExecutionFilter::has_symbol() const {
  return _internal_has_symbol();
}
inline void ExecutionFilter::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExecutionFilter::symbol() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.symbol)
  return _internal_symbol();
}
inline void ExecutionFilter::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.symbol)
}
inline std::string* ExecutionFilter::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:protobuf.ExecutionFilter.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& ExecutionFilter::_internal_symbol() const {
  return symbol_.Get();
}
inline void ExecutionFilter::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecutionFilter::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ExecutionFilter.symbol)
}
inline void ExecutionFilter::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ExecutionFilter.symbol)
}
inline void ExecutionFilter::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ExecutionFilter.symbol)
}
inline std::string* ExecutionFilter::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000004u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecutionFilter::release_symbol() {
  // @@protoc_insertion_point(field_release:protobuf.ExecutionFilter.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutionFilter::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ExecutionFilter.symbol)
}
inline std::string* ExecutionFilter::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ExecutionFilter.symbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return symbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecutionFilter::unsafe_arena_set_allocated_symbol(
    std::string* symbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  symbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ExecutionFilter.symbol)
}

// string secType = 5;
inline bool ExecutionFilter::_internal_has_sectype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExecutionFilter::has_sectype() const {
  return _internal_has_sectype();
}
inline void ExecutionFilter::clear_sectype() {
  sectype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ExecutionFilter::sectype() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.secType)
  return _internal_sectype();
}
inline void ExecutionFilter::set_sectype(const std::string& value) {
  _internal_set_sectype(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.secType)
}
inline std::string* ExecutionFilter::mutable_sectype() {
  // @@protoc_insertion_point(field_mutable:protobuf.ExecutionFilter.secType)
  return _internal_mutable_sectype();
}
inline const std::string& ExecutionFilter::_internal_sectype() const {
  return sectype_.Get();
}
inline void ExecutionFilter::_internal_set_sectype(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecutionFilter::set_sectype(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sectype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ExecutionFilter.secType)
}
inline void ExecutionFilter::set_sectype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ExecutionFilter.secType)
}
inline void ExecutionFilter::set_sectype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ExecutionFilter.secType)
}
inline std::string* ExecutionFilter::_internal_mutable_sectype() {
  _has_bits_[0] |= 0x00000008u;
  return sectype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecutionFilter::release_sectype() {
  // @@protoc_insertion_point(field_release:protobuf.ExecutionFilter.secType)
  if (!_internal_has_sectype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sectype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutionFilter::set_allocated_sectype(std::string* sectype) {
  if (sectype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sectype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sectype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ExecutionFilter.secType)
}
inline std::string* ExecutionFilter::unsafe_arena_release_sectype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ExecutionFilter.secType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return sectype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecutionFilter::unsafe_arena_set_allocated_sectype(
    std::string* sectype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sectype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sectype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sectype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ExecutionFilter.secType)
}

// string exchange = 6;
inline bool ExecutionFilter::_internal_has_exchange() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExecutionFilter::has_exchange() const {
  return _internal_has_exchange();
}
inline void ExecutionFilter::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ExecutionFilter::exchange() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.exchange)
  return _internal_exchange();
}
inline void ExecutionFilter::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.exchange)
}
inline std::string* ExecutionFilter::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:protobuf.ExecutionFilter.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& ExecutionFilter::_internal_exchange() const {
  return exchange_.Get();
}
inline void ExecutionFilter::_internal_set_exchange(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecutionFilter::set_exchange(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ExecutionFilter.exchange)
}
inline void ExecutionFilter::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ExecutionFilter.exchange)
}
inline void ExecutionFilter::set_exchange(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ExecutionFilter.exchange)
}
inline std::string* ExecutionFilter::_internal_mutable_exchange() {
  _has_bits_[0] |= 0x00000010u;
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecutionFilter::release_exchange() {
  // @@protoc_insertion_point(field_release:protobuf.ExecutionFilter.exchange)
  if (!_internal_has_exchange()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return exchange_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutionFilter::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ExecutionFilter.exchange)
}
inline std::string* ExecutionFilter::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ExecutionFilter.exchange)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return exchange_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecutionFilter::unsafe_arena_set_allocated_exchange(
    std::string* exchange) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  exchange_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ExecutionFilter.exchange)
}

// string side = 7;
inline bool ExecutionFilter::_internal_has_side() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExecutionFilter::has_side() const {
  return _internal_has_side();
}
inline void ExecutionFilter::clear_side() {
  side_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ExecutionFilter::side() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.side)
  return _internal_side();
}
inline void ExecutionFilter::set_side(const std::string& value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.side)
}
inline std::string* ExecutionFilter::mutable_side() {
  // @@protoc_insertion_point(field_mutable:protobuf.ExecutionFilter.side)
  return _internal_mutable_side();
}
inline const std::string& ExecutionFilter::_internal_side() const {
  return side_.Get();
}
inline void ExecutionFilter::_internal_set_side(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ExecutionFilter::set_side(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  side_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.ExecutionFilter.side)
}
inline void ExecutionFilter::set_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.ExecutionFilter.side)
}
inline void ExecutionFilter::set_side(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  side_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.ExecutionFilter.side)
}
inline std::string* ExecutionFilter::_internal_mutable_side() {
  _has_bits_[0] |= 0x00000020u;
  return side_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ExecutionFilter::release_side() {
  // @@protoc_insertion_point(field_release:protobuf.ExecutionFilter.side)
  if (!_internal_has_side()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return side_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutionFilter::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.ExecutionFilter.side)
}
inline std::string* ExecutionFilter::unsafe_arena_release_side() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.ExecutionFilter.side)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return side_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ExecutionFilter::unsafe_arena_set_allocated_side(
    std::string* side) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (side != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  side_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      side, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ExecutionFilter.side)
}

// int32 lastNDays = 8;
inline bool ExecutionFilter::_internal_has_lastndays() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExecutionFilter::has_lastndays() const {
  return _internal_has_lastndays();
}
inline void ExecutionFilter::clear_lastndays() {
  lastndays_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionFilter::_internal_lastndays() const {
  return lastndays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionFilter::lastndays() const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.lastNDays)
  return _internal_lastndays();
}
inline void ExecutionFilter::_internal_set_lastndays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lastndays_ = value;
}
inline void ExecutionFilter::set_lastndays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastndays(value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.lastNDays)
}

// repeated int32 specificDates = 9;
inline int ExecutionFilter::_internal_specificdates_size() const {
  return specificdates_.size();
}
inline int ExecutionFilter::specificdates_size() const {
  return _internal_specificdates_size();
}
inline void ExecutionFilter::clear_specificdates() {
  specificdates_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionFilter::_internal_specificdates(int index) const {
  return specificdates_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionFilter::specificdates(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.ExecutionFilter.specificDates)
  return _internal_specificdates(index);
}
inline void ExecutionFilter::set_specificdates(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  specificdates_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.ExecutionFilter.specificDates)
}
inline void ExecutionFilter::_internal_add_specificdates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  specificdates_.Add(value);
}
inline void ExecutionFilter::add_specificdates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_specificdates(value);
  // @@protoc_insertion_point(field_add:protobuf.ExecutionFilter.specificDates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ExecutionFilter::_internal_specificdates() const {
  return specificdates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ExecutionFilter::specificdates() const {
  // @@protoc_insertion_point(field_list:protobuf.ExecutionFilter.specificDates)
  return _internal_specificdates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ExecutionFilter::_internal_mutable_specificdates() {
  return &specificdates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ExecutionFilter::mutable_specificdates() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.ExecutionFilter.specificDates)
  return _internal_mutable_specificdates();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ExecutionFilter_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderAllocation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OrderAllocation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OrderAllocation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OrderAllocation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OrderAllocation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OrderAllocation_2eproto;
namespace protobuf {
class OrderAllocation;
class OrderAllocationDefaultTypeInternal;
extern OrderAllocationDefaultTypeInternal _OrderAllocation_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::OrderAllocation* Arena::CreateMaybeMessage<::protobuf::OrderAllocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class OrderAllocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.OrderAllocation) */ {
 public:
  inline OrderAllocation() : OrderAllocation(nullptr) {};
  virtual ~OrderAllocation();

  OrderAllocation(const OrderAllocation& from);
  OrderAllocation(OrderAllocation&& from) noexcept
    : OrderAllocation() {
    *this = ::std::move(from);
  }

  inline OrderAllocation& operator=(const OrderAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderAllocation& operator=(OrderAllocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderAllocation* internal_default_instance() {
    return reinterpret_cast<const OrderAllocation*>(
               &_OrderAllocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderAllocation& a, OrderAllocation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderAllocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderAllocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderAllocation* New() const final {
    return CreateMaybeMessage<OrderAllocation>(nullptr);
  }

  OrderAllocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderAllocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderAllocation& from);
  void MergeFrom(const OrderAllocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderAllocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.OrderAllocation";
  }
  protected:
  explicit OrderAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderAllocation_2eproto);
    return ::descriptor_table_OrderAllocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPositionFieldNumber = 2,
    kPositionDesiredFieldNumber = 3,
    kPositionAfterFieldNumber = 4,
    kDesiredAllocQtyFieldNumber = 5,
    kAllowedAllocQtyFieldNumber = 6,
    kIsMonetaryFieldNumber = 7,
  };
  // string account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account(
      std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const std::string& position() const;
  void set_position(const std::string& value);
  void set_position(std::string&& value);
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  std::string* mutable_position();
  std::string* release_position();
  void set_allocated_position(std::string* position);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_position();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_position(
      std::string* position);
  private:
  const std::string& _internal_position() const;
  void _internal_set_position(const std::string& value);
  std::string* _internal_mutable_position();
  public:

  // string positionDesired = 3;
  bool has_positiondesired() const;
  private:
  bool _internal_has_positiondesired() const;
  public:
  void clear_positiondesired();
  const std::string& positiondesired() const;
  void set_positiondesired(const std::string& value);
  void set_positiondesired(std::string&& value);
  void set_positiondesired(const char* value);
  void set_positiondesired(const char* value, size_t size);
  std::string* mutable_positiondesired();
  std::string* release_positiondesired();
  void set_allocated_positiondesired(std::string* positiondesired);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_positiondesired();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_positiondesired(
      std::string* positiondesired);
  private:
  const std::string& _internal_positiondesired() const;
  void _internal_set_positiondesired(const std::string& value);
  std::string* _internal_mutable_positiondesired();
  public:

  // string positionAfter = 4;
  bool has_positionafter() const;
  private:
  bool _internal_has_positionafter() const;
  public:
  void clear_positionafter();
  const std::string& positionafter() const;
  void set_positionafter(const std::string& value);
  void set_positionafter(std::string&& value);
  void set_positionafter(const char* value);
  void set_positionafter(const char* value, size_t size);
  std::string* mutable_positionafter();
  std::string* release_positionafter();
  void set_allocated_positionafter(std::string* positionafter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_positionafter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_positionafter(
      std::string* positionafter);
  private:
  const std::string& _internal_positionafter() const;
  void _internal_set_positionafter(const std::string& value);
  std::string* _internal_mutable_positionafter();
  public:

  // string desiredAllocQty = 5;
  bool has_desiredallocqty() const;
  private:
  bool _internal_has_desiredallocqty() const;
  public:
  void clear_desiredallocqty();
  const std::string& desiredallocqty() const;
  void set_desiredallocqty(const std::string& value);
  void set_desiredallocqty(std::string&& value);
  void set_desiredallocqty(const char* value);
  void set_desiredallocqty(const char* value, size_t size);
  std::string* mutable_desiredallocqty();
  std::string* release_desiredallocqty();
  void set_allocated_desiredallocqty(std::string* desiredallocqty);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_desiredallocqty();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_desiredallocqty(
      std::string* desiredallocqty);
  private:
  const std::string& _internal_desiredallocqty() const;
  void _internal_set_desiredallocqty(const std::string& value);
  std::string* _internal_mutable_desiredallocqty();
  public:

  // string allowedAllocQty = 6;
  bool has_allowedallocqty() const;
  private:
  bool _internal_has_allowedallocqty() const;
  public:
  void clear_allowedallocqty();
  const std::string& allowedallocqty() const;
  void set_allowedallocqty(const std::string& value);
  void set_allowedallocqty(std::string&& value);
  void set_allowedallocqty(const char* value);
  void set_allowedallocqty(const char* value, size_t size);
  std::string* mutable_allowedallocqty();
  std::string* release_allowedallocqty();
  void set_allocated_allowedallocqty(std::string* allowedallocqty);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_allowedallocqty();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_allowedallocqty(
      std::string* allowedallocqty);
  private:
  const std::string& _internal_allowedallocqty() const;
  void _internal_set_allowedallocqty(const std::string& value);
  std::string* _internal_mutable_allowedallocqty();
  public:

  // bool isMonetary = 7;
  bool has_ismonetary() const;
  private:
  bool _internal_has_ismonetary() const;
  public:
  void clear_ismonetary();
  bool ismonetary() const;
  void set_ismonetary(bool value);
  private:
  bool _internal_ismonetary() const;
  void _internal_set_ismonetary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.OrderAllocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positiondesired_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positionafter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desiredallocqty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allowedallocqty_;
  bool ismonetary_;
  friend struct ::TableStruct_OrderAllocation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderAllocation

// string account = 1;
inline bool OrderAllocation::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OrderAllocation::has_account() const {
  return _internal_has_account();
}
inline void OrderAllocation::clear_account() {
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderAllocation::account() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.account)
  return _internal_account();
}
inline void OrderAllocation::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.account)
}
inline std::string* OrderAllocation::mutable_account() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.account)
  return _internal_mutable_account();
}
inline const std::string& OrderAllocation::_internal_account() const {
  return account_.Get();
}
inline void OrderAllocation::_internal_set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderAllocation::set_account(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderAllocation.account)
}
inline void OrderAllocation::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderAllocation.account)
}
inline void OrderAllocation::set_account(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderAllocation.account)
}
inline std::string* OrderAllocation::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  return account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderAllocation::release_account() {
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return account_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAllocation::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.account)
}
inline std::string* OrderAllocation::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderAllocation.account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderAllocation::unsafe_arena_set_allocated_account(
    std::string* account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderAllocation.account)
}

// string position = 2;
inline bool OrderAllocation::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrderAllocation::has_position() const {
  return _internal_has_position();
}
inline void OrderAllocation::clear_position() {
  position_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OrderAllocation::position() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.position)
  return _internal_position();
}
inline void OrderAllocation::set_position(const std::string& value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.position)
}
inline std::string* OrderAllocation::mutable_position() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.position)
  return _internal_mutable_position();
}
inline const std::string& OrderAllocation::_internal_position() const {
  return position_.Get();
}
inline void OrderAllocation::_internal_set_position(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderAllocation::set_position(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  position_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderAllocation.position)
}
inline void OrderAllocation::set_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderAllocation.position)
}
inline void OrderAllocation::set_position(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  position_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderAllocation.position)
}
inline std::string* OrderAllocation::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  return position_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderAllocation::release_position() {
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.position)
  if (!_internal_has_position()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return position_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAllocation::set_allocated_position(std::string* position) {
  if (position != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.position)
}
inline std::string* OrderAllocation::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderAllocation.position)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return position_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderAllocation::unsafe_arena_set_allocated_position(
    std::string* position) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (position != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      position, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderAllocation.position)
}

// string positionDesired = 3;
inline bool OrderAllocation::_internal_has_positiondesired() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrderAllocation::has_positiondesired() const {
  return _internal_has_positiondesired();
}
inline void OrderAllocation::clear_positiondesired() {
  positiondesired_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OrderAllocation::positiondesired() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.positionDesired)
  return _internal_positiondesired();
}
inline void OrderAllocation::set_positiondesired(const std::string& value) {
  _internal_set_positiondesired(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.positionDesired)
}
inline std::string* OrderAllocation::mutable_positiondesired() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.positionDesired)
  return _internal_mutable_positiondesired();
}
inline const std::string& OrderAllocation::_internal_positiondesired() const {
  return positiondesired_.Get();
}
inline void OrderAllocation::_internal_set_positiondesired(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  positiondesired_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderAllocation::set_positiondesired(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  positiondesired_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderAllocation.positionDesired)
}
inline void OrderAllocation::set_positiondesired(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  positiondesired_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderAllocation.positionDesired)
}
inline void OrderAllocation::set_positiondesired(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  positiondesired_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderAllocation.positionDesired)
}
inline std::string* OrderAllocation::_internal_mutable_positiondesired() {
  _has_bits_[0] |= 0x00000004u;
  return positiondesired_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderAllocation::release_positiondesired() {
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.positionDesired)
  if (!_internal_has_positiondesired()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return positiondesired_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAllocation::set_allocated_positiondesired(std::string* positiondesired) {
  if (positiondesired != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  positiondesired_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positiondesired,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.positionDesired)
}
inline std::string* OrderAllocation::unsafe_arena_release_positiondesired() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderAllocation.positionDesired)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return positiondesired_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderAllocation::unsafe_arena_set_allocated_positiondesired(
    std::string* positiondesired) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (positiondesired != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  positiondesired_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      positiondesired, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderAllocation.positionDesired)
}

// string positionAfter = 4;
inline bool OrderAllocation::_internal_has_positionafter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OrderAllocation::has_positionafter() const {
  return _internal_has_positionafter();
}
inline void OrderAllocation::clear_positionafter() {
  positionafter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OrderAllocation::positionafter() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.positionAfter)
  return _internal_positionafter();
}
inline void OrderAllocation::set_positionafter(const std::string& value) {
  _internal_set_positionafter(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.positionAfter)
}
inline std::string* OrderAllocation::mutable_positionafter() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.positionAfter)
  return _internal_mutable_positionafter();
}
inline const std::string& OrderAllocation::_internal_positionafter() const {
  return positionafter_.Get();
}
inline void OrderAllocation::_internal_set_positionafter(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  positionafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderAllocation::set_positionafter(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  positionafter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderAllocation.positionAfter)
}
inline void OrderAllocation::set_positionafter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  positionafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderAllocation.positionAfter)
}
inline void OrderAllocation::set_positionafter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  positionafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderAllocation.positionAfter)
}
inline std::string* OrderAllocation::_internal_mutable_positionafter() {
  _has_bits_[0] |= 0x00000008u;
  return positionafter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderAllocation::release_positionafter() {
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.positionAfter)
  if (!_internal_has_positionafter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return positionafter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAllocation::set_allocated_positionafter(std::string* positionafter) {
  if (positionafter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  positionafter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positionafter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.positionAfter)
}
inline std::string* OrderAllocation::unsafe_arena_release_positionafter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderAllocation.positionAfter)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return positionafter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderAllocation::unsafe_arena_set_allocated_positionafter(
    std::string* positionafter) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (positionafter != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  positionafter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      positionafter, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderAllocation.positionAfter)
}

// string desiredAllocQty = 5;
inline bool OrderAllocation::_internal_has_desiredallocqty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OrderAllocation::has_desiredallocqty() const {
  return _internal_has_desiredallocqty();
}
inline void OrderAllocation::clear_desiredallocqty() {
  desiredallocqty_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& OrderAllocation::desiredallocqty() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.desiredAllocQty)
  return _internal_desiredallocqty();
}
inline void OrderAllocation::set_desiredallocqty(const std::string& value) {
  _internal_set_desiredallocqty(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.desiredAllocQty)
}
inline std::string* OrderAllocation::mutable_desiredallocqty() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.desiredAllocQty)
  return _internal_mutable_desiredallocqty();
}
inline const std::string& OrderAllocation::_internal_desiredallocqty() const {
  return desiredallocqty_.Get();
}
inline void OrderAllocation::_internal_set_desiredallocqty(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  desiredallocqty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderAllocation::set_desiredallocqty(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  desiredallocqty_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderAllocation.desiredAllocQty)
}
inline void OrderAllocation::set_desiredallocqty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  desiredallocqty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderAllocation.desiredAllocQty)
}
inline void OrderAllocation::set_desiredallocqty(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  desiredallocqty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderAllocation.desiredAllocQty)
}
inline std::string* OrderAllocation::_internal_mutable_desiredallocqty() {
  _has_bits_[0] |= 0x00000010u;
  return desiredallocqty_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderAllocation::release_desiredallocqty() {
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.desiredAllocQty)
  if (!_internal_has_desiredallocqty()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return desiredallocqty_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAllocation::set_allocated_desiredallocqty(std::string* desiredallocqty) {
  if (desiredallocqty != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  desiredallocqty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desiredallocqty,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.desiredAllocQty)
}
inline std::string* OrderAllocation::unsafe_arena_release_desiredallocqty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderAllocation.desiredAllocQty)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return desiredallocqty_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderAllocation::unsafe_arena_set_allocated_desiredallocqty(
    std::string* desiredallocqty) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (desiredallocqty != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  desiredallocqty_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      desiredallocqty, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderAllocation.desiredAllocQty)
}

// string allowedAllocQty = 6;
inline bool OrderAllocation::_internal_has_allowedallocqty() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OrderAllocation::has_allowedallocqty() const {
  return _internal_has_allowedallocqty();
}
inline void OrderAllocation::clear_allowedallocqty() {
  allowedallocqty_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& OrderAllocation::allowedallocqty() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.allowedAllocQty)
  return _internal_allowedallocqty();
}
inline void OrderAllocation::set_allowedallocqty(const std::string& value) {
  _internal_set_allowedallocqty(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.allowedAllocQty)
}
inline std::string* OrderAllocation::mutable_allowedallocqty() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderAllocation.allowedAllocQty)
  return _internal_mutable_allowedallocqty();
}
inline const std::string& OrderAllocation::_internal_allowedallocqty() const {
  return allowedallocqty_.Get();
}
inline void OrderAllocation::_internal_set_allowedallocqty(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  allowedallocqty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderAllocation::set_allowedallocqty(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  allowedallocqty_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderAllocation.allowedAllocQty)
}
inline void OrderAllocation::set_allowedallocqty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  allowedallocqty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderAllocation.allowedAllocQty)
}
inline void OrderAllocation::set_allowedallocqty(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  allowedallocqty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderAllocation.allowedAllocQty)
}
inline std::string* OrderAllocation::_internal_mutable_allowedallocqty() {
  _has_bits_[0] |= 0x00000020u;
  return allowedallocqty_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderAllocation::release_allowedallocqty() {
  // @@protoc_insertion_point(field_release:protobuf.OrderAllocation.allowedAllocQty)
  if (!_internal_has_allowedallocqty()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return allowedallocqty_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderAllocation::set_allocated_allowedallocqty(std::string* allowedallocqty) {
  if (allowedallocqty != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  allowedallocqty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), allowedallocqty,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderAllocation.allowedAllocQty)
}
inline std::string* OrderAllocation::unsafe_arena_release_allowedallocqty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderAllocation.allowedAllocQty)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return allowedallocqty_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderAllocation::unsafe_arena_set_allocated_allowedallocqty(
    std::string* allowedallocqty) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (allowedallocqty != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  allowedallocqty_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      allowedallocqty, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderAllocation.allowedAllocQty)
}

// bool isMonetary = 7;
inline bool OrderAllocation::_internal_has_ismonetary() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OrderAllocation::has_ismonetary() const {
  return _internal_has_ismonetary();
}
inline void OrderAllocation::clear_ismonetary() {
  ismonetary_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool OrderAllocation::_internal_ismonetary() const {
  return ismonetary_;
}
inline bool OrderAllocation::ismonetary() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderAllocation.isMonetary)
  return _internal_ismonetary();
}
inline void OrderAllocation::_internal_set_ismonetary(bool value) {
  _has_bits_[0] |= 0x00000040u;
  ismonetary_ = value;
}
inline void OrderAllocation::set_ismonetary(bool value) {
  _internal_set_ismonetary(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderAllocation.isMonetary)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OrderAllocation_2eproto

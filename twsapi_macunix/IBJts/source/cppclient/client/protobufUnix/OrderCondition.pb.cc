// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderCondition.proto

#include "OrderCondition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protobuf {
class OrderConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderCondition> _instance;
} _OrderCondition_default_instance_;
}  // namespace protobuf
static void InitDefaultsscc_info_OrderCondition_OrderCondition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf::_OrderCondition_default_instance_;
    new (ptr) ::protobuf::OrderCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf::OrderCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OrderCondition_OrderCondition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OrderCondition_OrderCondition_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OrderCondition_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_OrderCondition_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OrderCondition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OrderCondition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, type_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, isconjunctionconnection_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, ismore_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, conid_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, exchange_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, symbol_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, sectype_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, percent_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, changepercent_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, price_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, triggermethod_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, time_),
  PROTOBUF_FIELD_OFFSET(::protobuf::OrderCondition, volume_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  8,
  9,
  10,
  11,
  3,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::protobuf::OrderCondition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf::_OrderCondition_default_instance_),
};

const char descriptor_table_protodef_OrderCondition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024OrderCondition.proto\022\010protobuf\"\352\003\n\016Ord"
  "erCondition\022\021\n\004type\030\001 \001(\005H\000\210\001\001\022$\n\027isConj"
  "unctionConnection\030\002 \001(\010H\001\210\001\001\022\023\n\006isMore\030\003"
  " \001(\010H\002\210\001\001\022\022\n\005conId\030\004 \001(\005H\003\210\001\001\022\025\n\010exchang"
  "e\030\005 \001(\tH\004\210\001\001\022\023\n\006symbol\030\006 \001(\tH\005\210\001\001\022\024\n\007sec"
  "Type\030\007 \001(\tH\006\210\001\001\022\024\n\007percent\030\010 \001(\005H\007\210\001\001\022\032\n"
  "\rchangePercent\030\t \001(\001H\010\210\001\001\022\022\n\005price\030\n \001(\001"
  "H\t\210\001\001\022\032\n\rtriggerMethod\030\013 \001(\005H\n\210\001\001\022\021\n\004tim"
  "e\030\014 \001(\tH\013\210\001\001\022\023\n\006volume\030\r \001(\005H\014\210\001\001B\007\n\005_ty"
  "peB\032\n\030_isConjunctionConnectionB\t\n\007_isMor"
  "eB\010\n\006_conIdB\013\n\t_exchangeB\t\n\007_symbolB\n\n\010_"
  "secTypeB\n\n\010_percentB\020\n\016_changePercentB\010\n"
  "\006_priceB\020\n\016_triggerMethodB\007\n\005_timeB\t\n\007_v"
  "olumeB>\n\026com.ib.client.protobufB\023OrderCo"
  "nditionProto\252\002\016IBApi.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OrderCondition_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OrderCondition_2eproto_sccs[1] = {
  &scc_info_OrderCondition_OrderCondition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OrderCondition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OrderCondition_2eproto = {
  false, false, descriptor_table_protodef_OrderCondition_2eproto, "OrderCondition.proto", 597,
  &descriptor_table_OrderCondition_2eproto_once, descriptor_table_OrderCondition_2eproto_sccs, descriptor_table_OrderCondition_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_OrderCondition_2eproto::offsets,
  file_level_metadata_OrderCondition_2eproto, 1, file_level_enum_descriptors_OrderCondition_2eproto, file_level_service_descriptors_OrderCondition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OrderCondition_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OrderCondition_2eproto)), true);
namespace protobuf {

// ===================================================================

void OrderCondition::InitAsDefaultInstance() {
}
class OrderCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderCondition>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isconjunctionconnection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ismore(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_conid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sectype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_changepercent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_triggermethod(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

OrderCondition::OrderCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.OrderCondition)
}
OrderCondition::OrderCondition(const OrderCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exchange()) {
    exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange(),
      GetArena());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  sectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sectype()) {
    sectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sectype(),
      GetArena());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time()) {
    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&type_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:protobuf.OrderCondition)
}

void OrderCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderCondition_OrderCondition_2eproto.base);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sectype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&type_)) + sizeof(volume_));
}

OrderCondition::~OrderCondition() {
  // @@protoc_insertion_point(destructor:protobuf.OrderCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrderCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sectype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderCondition::ArenaDtor(void* object) {
  OrderCondition* _this = reinterpret_cast< OrderCondition* >(object);
  (void)_this;
}
void OrderCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCondition& OrderCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderCondition_OrderCondition_2eproto.base);
  return *internal_default_instance();
}


void OrderCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.OrderCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      symbol_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sectype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      time_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conid_) -
        reinterpret_cast<char*>(&type_)) + sizeof(conid_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volume_) -
        reinterpret_cast<char*>(&percent_)) + sizeof(volume_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isConjunctionConnection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isconjunctionconnection(&has_bits);
          isconjunctionconnection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isMore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ismore(&has_bits);
          ismore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 conId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_conid(&has_bits);
          conid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.OrderCondition.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.OrderCondition.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sectype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.OrderCondition.secType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 percent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_percent(&has_bits);
          percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double changePercent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_changepercent(&has_bits);
          changepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 triggerMethod = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_triggermethod(&has_bits);
          triggermethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf.OrderCondition.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_volume(&has_bits);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.OrderCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // bool isConjunctionConnection = 2;
  if (_internal_has_isconjunctionconnection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isconjunctionconnection(), target);
  }

  // bool isMore = 3;
  if (_internal_has_ismore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ismore(), target);
  }

  // int32 conId = 4;
  if (_internal_has_conid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_conid(), target);
  }

  // string exchange = 5;
  if (_internal_has_exchange()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.OrderCondition.exchange");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_exchange(), target);
  }

  // string symbol = 6;
  if (_internal_has_symbol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.OrderCondition.symbol");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_symbol(), target);
  }

  // string secType = 7;
  if (_internal_has_sectype()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sectype().data(), static_cast<int>(this->_internal_sectype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.OrderCondition.secType");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sectype(), target);
  }

  // int32 percent = 8;
  if (_internal_has_percent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_percent(), target);
  }

  // double changePercent = 9;
  if (_internal_has_changepercent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_changepercent(), target);
  }

  // double price = 10;
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_price(), target);
  }

  // int32 triggerMethod = 11;
  if (_internal_has_triggermethod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_triggermethod(), target);
  }

  // string time = 12;
  if (_internal_has_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf.OrderCondition.time");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_time(), target);
  }

  // int32 volume = 13;
  if (_internal_has_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.OrderCondition)
  return target;
}

size_t OrderCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.OrderCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string exchange = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exchange());
    }

    // string symbol = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_symbol());
    }

    // string secType = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sectype());
    }

    // string time = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time());
    }

    // int32 type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // bool isConjunctionConnection = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool isMore = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // int32 conId = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_conid());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // int32 percent = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_percent());
    }

    // double changePercent = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // double price = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // int32 triggerMethod = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_triggermethod());
    }

    // int32 volume = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_volume());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.OrderCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.OrderCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.OrderCondition)
    MergeFrom(*source);
  }
}

void OrderCondition::MergeFrom(const OrderCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.OrderCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sectype(from._internal_sectype());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_time(from._internal_time());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      isconjunctionconnection_ = from.isconjunctionconnection_;
    }
    if (cached_has_bits & 0x00000040u) {
      ismore_ = from.ismore_;
    }
    if (cached_has_bits & 0x00000080u) {
      conid_ = from.conid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      percent_ = from.percent_;
    }
    if (cached_has_bits & 0x00000200u) {
      changepercent_ = from.changepercent_;
    }
    if (cached_has_bits & 0x00000400u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000800u) {
      triggermethod_ = from.triggermethod_;
    }
    if (cached_has_bits & 0x00001000u) {
      volume_ = from.volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.OrderCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCondition::CopyFrom(const OrderCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.OrderCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCondition::IsInitialized() const {
  return true;
}

void OrderCondition::InternalSwap(OrderCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  exchange_.Swap(&other->exchange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sectype_.Swap(&other->sectype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderCondition, volume_)
      + sizeof(OrderCondition::volume_)
      - PROTOBUF_FIELD_OFFSET(OrderCondition, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf::OrderCondition* Arena::CreateMaybeMessage< ::protobuf::OrderCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf::OrderCondition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

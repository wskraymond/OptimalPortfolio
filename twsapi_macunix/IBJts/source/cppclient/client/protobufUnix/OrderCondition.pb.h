// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderCondition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OrderCondition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OrderCondition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OrderCondition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OrderCondition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OrderCondition_2eproto;
namespace protobuf {
class OrderCondition;
class OrderConditionDefaultTypeInternal;
extern OrderConditionDefaultTypeInternal _OrderCondition_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf::OrderCondition* Arena::CreateMaybeMessage<::protobuf::OrderCondition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf {

// ===================================================================

class OrderCondition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.OrderCondition) */ {
 public:
  inline OrderCondition() : OrderCondition(nullptr) {};
  virtual ~OrderCondition();

  OrderCondition(const OrderCondition& from);
  OrderCondition(OrderCondition&& from) noexcept
    : OrderCondition() {
    *this = ::std::move(from);
  }

  inline OrderCondition& operator=(const OrderCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderCondition& operator=(OrderCondition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderCondition* internal_default_instance() {
    return reinterpret_cast<const OrderCondition*>(
               &_OrderCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderCondition& a, OrderCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderCondition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderCondition* New() const final {
    return CreateMaybeMessage<OrderCondition>(nullptr);
  }

  OrderCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderCondition& from);
  void MergeFrom(const OrderCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf.OrderCondition";
  }
  protected:
  explicit OrderCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OrderCondition_2eproto);
    return ::descriptor_table_OrderCondition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 5,
    kSymbolFieldNumber = 6,
    kSecTypeFieldNumber = 7,
    kTimeFieldNumber = 12,
    kTypeFieldNumber = 1,
    kIsConjunctionConnectionFieldNumber = 2,
    kIsMoreFieldNumber = 3,
    kConIdFieldNumber = 4,
    kPercentFieldNumber = 8,
    kChangePercentFieldNumber = 9,
    kPriceFieldNumber = 10,
    kTriggerMethodFieldNumber = 11,
    kVolumeFieldNumber = 13,
  };
  // string exchange = 5;
  bool has_exchange() const;
  private:
  bool _internal_has_exchange() const;
  public:
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange(
      std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 6;
  bool has_symbol() const;
  private:
  bool _internal_has_symbol() const;
  public:
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbol(
      std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string secType = 7;
  bool has_sectype() const;
  private:
  bool _internal_has_sectype() const;
  public:
  void clear_sectype();
  const std::string& sectype() const;
  void set_sectype(const std::string& value);
  void set_sectype(std::string&& value);
  void set_sectype(const char* value);
  void set_sectype(const char* value, size_t size);
  std::string* mutable_sectype();
  std::string* release_sectype();
  void set_allocated_sectype(std::string* sectype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sectype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sectype(
      std::string* sectype);
  private:
  const std::string& _internal_sectype() const;
  void _internal_set_sectype(const std::string& value);
  std::string* _internal_mutable_sectype();
  public:

  // string time = 12;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time(
      std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isConjunctionConnection = 2;
  bool has_isconjunctionconnection() const;
  private:
  bool _internal_has_isconjunctionconnection() const;
  public:
  void clear_isconjunctionconnection();
  bool isconjunctionconnection() const;
  void set_isconjunctionconnection(bool value);
  private:
  bool _internal_isconjunctionconnection() const;
  void _internal_set_isconjunctionconnection(bool value);
  public:

  // bool isMore = 3;
  bool has_ismore() const;
  private:
  bool _internal_has_ismore() const;
  public:
  void clear_ismore();
  bool ismore() const;
  void set_ismore(bool value);
  private:
  bool _internal_ismore() const;
  void _internal_set_ismore(bool value);
  public:

  // int32 conId = 4;
  bool has_conid() const;
  private:
  bool _internal_has_conid() const;
  public:
  void clear_conid();
  ::PROTOBUF_NAMESPACE_ID::int32 conid() const;
  void set_conid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_conid() const;
  void _internal_set_conid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 percent = 8;
  bool has_percent() const;
  private:
  bool _internal_has_percent() const;
  public:
  void clear_percent();
  ::PROTOBUF_NAMESPACE_ID::int32 percent() const;
  void set_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_percent() const;
  void _internal_set_percent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double changePercent = 9;
  bool has_changepercent() const;
  private:
  bool _internal_has_changepercent() const;
  public:
  void clear_changepercent();
  double changepercent() const;
  void set_changepercent(double value);
  private:
  double _internal_changepercent() const;
  void _internal_set_changepercent(double value);
  public:

  // double price = 10;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 triggerMethod = 11;
  bool has_triggermethod() const;
  private:
  bool _internal_has_triggermethod() const;
  public:
  void clear_triggermethod();
  ::PROTOBUF_NAMESPACE_ID::int32 triggermethod() const;
  void set_triggermethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_triggermethod() const;
  void _internal_set_triggermethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume = 13;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf.OrderCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sectype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  bool isconjunctionconnection_;
  bool ismore_;
  ::PROTOBUF_NAMESPACE_ID::int32 conid_;
  ::PROTOBUF_NAMESPACE_ID::int32 percent_;
  double changepercent_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 triggermethod_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  friend struct ::TableStruct_OrderCondition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderCondition

// int32 type = 1;
inline bool OrderCondition::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OrderCondition::has_type() const {
  return _internal_has_type();
}
inline void OrderCondition::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::type() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.type)
  return _internal_type();
}
inline void OrderCondition::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void OrderCondition::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.type)
}

// bool isConjunctionConnection = 2;
inline bool OrderCondition::_internal_has_isconjunctionconnection() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OrderCondition::has_isconjunctionconnection() const {
  return _internal_has_isconjunctionconnection();
}
inline void OrderCondition::clear_isconjunctionconnection() {
  isconjunctionconnection_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool OrderCondition::_internal_isconjunctionconnection() const {
  return isconjunctionconnection_;
}
inline bool OrderCondition::isconjunctionconnection() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.isConjunctionConnection)
  return _internal_isconjunctionconnection();
}
inline void OrderCondition::_internal_set_isconjunctionconnection(bool value) {
  _has_bits_[0] |= 0x00000020u;
  isconjunctionconnection_ = value;
}
inline void OrderCondition::set_isconjunctionconnection(bool value) {
  _internal_set_isconjunctionconnection(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.isConjunctionConnection)
}

// bool isMore = 3;
inline bool OrderCondition::_internal_has_ismore() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OrderCondition::has_ismore() const {
  return _internal_has_ismore();
}
inline void OrderCondition::clear_ismore() {
  ismore_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool OrderCondition::_internal_ismore() const {
  return ismore_;
}
inline bool OrderCondition::ismore() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.isMore)
  return _internal_ismore();
}
inline void OrderCondition::_internal_set_ismore(bool value) {
  _has_bits_[0] |= 0x00000040u;
  ismore_ = value;
}
inline void OrderCondition::set_ismore(bool value) {
  _internal_set_ismore(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.isMore)
}

// int32 conId = 4;
inline bool OrderCondition::_internal_has_conid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OrderCondition::has_conid() const {
  return _internal_has_conid();
}
inline void OrderCondition::clear_conid() {
  conid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::_internal_conid() const {
  return conid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::conid() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.conId)
  return _internal_conid();
}
inline void OrderCondition::_internal_set_conid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  conid_ = value;
}
inline void OrderCondition::set_conid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_conid(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.conId)
}

// string exchange = 5;
inline bool OrderCondition::_internal_has_exchange() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OrderCondition::has_exchange() const {
  return _internal_has_exchange();
}
inline void OrderCondition::clear_exchange() {
  exchange_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderCondition::exchange() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.exchange)
  return _internal_exchange();
}
inline void OrderCondition::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.exchange)
}
inline std::string* OrderCondition::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& OrderCondition::_internal_exchange() const {
  return exchange_.Get();
}
inline void OrderCondition::_internal_set_exchange(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderCondition::set_exchange(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  exchange_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderCondition.exchange)
}
inline void OrderCondition::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderCondition.exchange)
}
inline void OrderCondition::set_exchange(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  exchange_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderCondition.exchange)
}
inline std::string* OrderCondition::_internal_mutable_exchange() {
  _has_bits_[0] |= 0x00000001u;
  return exchange_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderCondition::release_exchange() {
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.exchange)
  if (!_internal_has_exchange()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return exchange_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCondition::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.exchange)
}
inline std::string* OrderCondition::unsafe_arena_release_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderCondition.exchange)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return exchange_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderCondition::unsafe_arena_set_allocated_exchange(
    std::string* exchange) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exchange_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderCondition.exchange)
}

// string symbol = 6;
inline bool OrderCondition::_internal_has_symbol() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrderCondition::has_symbol() const {
  return _internal_has_symbol();
}
inline void OrderCondition::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OrderCondition::symbol() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.symbol)
  return _internal_symbol();
}
inline void OrderCondition::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.symbol)
}
inline std::string* OrderCondition::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& OrderCondition::_internal_symbol() const {
  return symbol_.Get();
}
inline void OrderCondition::_internal_set_symbol(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderCondition::set_symbol(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderCondition.symbol)
}
inline void OrderCondition::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderCondition.symbol)
}
inline void OrderCondition::set_symbol(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderCondition.symbol)
}
inline std::string* OrderCondition::_internal_mutable_symbol() {
  _has_bits_[0] |= 0x00000002u;
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderCondition::release_symbol() {
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.symbol)
  if (!_internal_has_symbol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return symbol_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCondition::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.symbol)
}
inline std::string* OrderCondition::unsafe_arena_release_symbol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderCondition.symbol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return symbol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderCondition::unsafe_arena_set_allocated_symbol(
    std::string* symbol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbol != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  symbol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderCondition.symbol)
}

// string secType = 7;
inline bool OrderCondition::_internal_has_sectype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrderCondition::has_sectype() const {
  return _internal_has_sectype();
}
inline void OrderCondition::clear_sectype() {
  sectype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OrderCondition::sectype() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.secType)
  return _internal_sectype();
}
inline void OrderCondition::set_sectype(const std::string& value) {
  _internal_set_sectype(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.secType)
}
inline std::string* OrderCondition::mutable_sectype() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.secType)
  return _internal_mutable_sectype();
}
inline const std::string& OrderCondition::_internal_sectype() const {
  return sectype_.Get();
}
inline void OrderCondition::_internal_set_sectype(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderCondition::set_sectype(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sectype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderCondition.secType)
}
inline void OrderCondition::set_sectype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderCondition.secType)
}
inline void OrderCondition::set_sectype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sectype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderCondition.secType)
}
inline std::string* OrderCondition::_internal_mutable_sectype() {
  _has_bits_[0] |= 0x00000004u;
  return sectype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderCondition::release_sectype() {
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.secType)
  if (!_internal_has_sectype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sectype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCondition::set_allocated_sectype(std::string* sectype) {
  if (sectype != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sectype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sectype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.secType)
}
inline std::string* OrderCondition::unsafe_arena_release_sectype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderCondition.secType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return sectype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderCondition::unsafe_arena_set_allocated_sectype(
    std::string* sectype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sectype != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sectype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sectype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderCondition.secType)
}

// int32 percent = 8;
inline bool OrderCondition::_internal_has_percent() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool OrderCondition::has_percent() const {
  return _internal_has_percent();
}
inline void OrderCondition::clear_percent() {
  percent_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::_internal_percent() const {
  return percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::percent() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.percent)
  return _internal_percent();
}
inline void OrderCondition::_internal_set_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  percent_ = value;
}
inline void OrderCondition::set_percent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.percent)
}

// double changePercent = 9;
inline bool OrderCondition::_internal_has_changepercent() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool OrderCondition::has_changepercent() const {
  return _internal_has_changepercent();
}
inline void OrderCondition::clear_changepercent() {
  changepercent_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double OrderCondition::_internal_changepercent() const {
  return changepercent_;
}
inline double OrderCondition::changepercent() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.changePercent)
  return _internal_changepercent();
}
inline void OrderCondition::_internal_set_changepercent(double value) {
  _has_bits_[0] |= 0x00000200u;
  changepercent_ = value;
}
inline void OrderCondition::set_changepercent(double value) {
  _internal_set_changepercent(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.changePercent)
}

// double price = 10;
inline bool OrderCondition::_internal_has_price() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool OrderCondition::has_price() const {
  return _internal_has_price();
}
inline void OrderCondition::clear_price() {
  price_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double OrderCondition::_internal_price() const {
  return price_;
}
inline double OrderCondition::price() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.price)
  return _internal_price();
}
inline void OrderCondition::_internal_set_price(double value) {
  _has_bits_[0] |= 0x00000400u;
  price_ = value;
}
inline void OrderCondition::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.price)
}

// int32 triggerMethod = 11;
inline bool OrderCondition::_internal_has_triggermethod() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool OrderCondition::has_triggermethod() const {
  return _internal_has_triggermethod();
}
inline void OrderCondition::clear_triggermethod() {
  triggermethod_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::_internal_triggermethod() const {
  return triggermethod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::triggermethod() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.triggerMethod)
  return _internal_triggermethod();
}
inline void OrderCondition::_internal_set_triggermethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  triggermethod_ = value;
}
inline void OrderCondition::set_triggermethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_triggermethod(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.triggerMethod)
}

// string time = 12;
inline bool OrderCondition::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OrderCondition::has_time() const {
  return _internal_has_time();
}
inline void OrderCondition::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& OrderCondition::time() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.time)
  return _internal_time();
}
inline void OrderCondition::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.time)
}
inline std::string* OrderCondition::mutable_time() {
  // @@protoc_insertion_point(field_mutable:protobuf.OrderCondition.time)
  return _internal_mutable_time();
}
inline const std::string& OrderCondition::_internal_time() const {
  return time_.Get();
}
inline void OrderCondition::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderCondition::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protobuf.OrderCondition.time)
}
inline void OrderCondition::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protobuf.OrderCondition.time)
}
inline void OrderCondition::set_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protobuf.OrderCondition.time)
}
inline std::string* OrderCondition::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000008u;
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderCondition::release_time() {
  // @@protoc_insertion_point(field_release:protobuf.OrderCondition.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderCondition::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protobuf.OrderCondition.time)
}
inline std::string* OrderCondition::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.OrderCondition.time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OrderCondition::unsafe_arena_set_allocated_time(
    std::string* time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.OrderCondition.time)
}

// int32 volume = 13;
inline bool OrderCondition::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool OrderCondition::has_volume() const {
  return _internal_has_volume();
}
inline void OrderCondition::clear_volume() {
  volume_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderCondition::volume() const {
  // @@protoc_insertion_point(field_get:protobuf.OrderCondition.volume)
  return _internal_volume();
}
inline void OrderCondition::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  volume_ = value;
}
inline void OrderCondition::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:protobuf.OrderCondition.volume)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OrderCondition_2eproto
